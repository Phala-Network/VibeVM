services:
  vibevm-gateway:
    image: h4x3rotab/vibevm-gateway:v0.0.4
    container_name: vibevm-gateway
    network_mode: host
    environment:
      # Authentication settings
      - VIBEVM_AUTH_ENABLED=true
      - VIBEVM_USERNAME=admin
      - VIBEVM_PASSWORD=${VIBEVM_PASSWORD:-vibevm4454}
      - JWT_KEY_PATH=vibevm/auth/signing
      - JWT_PURPOSE=vibevm-session
      - JWT_EXPIRY_HOURS=24
      - DSTACK_SOCKET_PATH=/var/run/dstack.sock
      # Fallback for local dev (REMOVE in production)
      # - JWT_SECRET_FALLBACK=dev-secret-change-me-in-production
    volumes:
      - /var/run/dstack.sock:/var/run/dstack.sock
    depends_on:
      - aio-sandbox
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # ==========================================
  # AIO Sandbox (no direct port exposure)
  # ==========================================
  aio-sandbox:
    image: ghcr.io/agent-infra/sandbox:1.0.0.143
    container_name: aio-sandbox
    network_mode: host
    expose:
      - "8079"
      - "8000"
      - "8080"
      - "8089"
      - "8091"
      - "8100"
      - "8101"
      - "8102"
      - "8200"
      - "9222"
    environment:
      # Git repository configuration (format: owner/repo-name)
      - GITHUB_REPO=${GITHUB_REPO:-Phala-Network/erc-8004-tee-agent}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_COMMIT_HASH=${GITHUB_COMMIT_HASH:-}
      - DSTACK_APP_ID=${DSTACK_APP_ID}
      - DSTACK_GATEWAY_DOMAIN=${DSTACK_GATEWAY_DOMAIN}
      - DNS_OVER_HTTPS_TEMPLATES=${DNS_OVER_HTTPS_TEMPLATES:-}
      - WORKSPACE=${WORKSPACE:-"/home/gem"}
      - DISPLAY_WIDTH=${DISPLAY_WIDTH:-1280}
      - DISPLAY_HEIGHT=${DISPLAY_HEIGHT:-1024}
      # Port configuration for nginx services
      - WAIT_PORTS="8079,8091"
      - VNC_SERVER_PORT=5900
      - PUBLIC_PORT=8080
      - AUTH_BACKEND_PORT=8081
      - WEBSOCKET_PROXY_PORT=6080
      - GEM_SERVER_PORT=8088
      - MCP_HUB_PORT=8079
      - SANDBOX_SRV_PORT=8091
      - JUPYTER_LAB_PORT=8888
      - CODE_SERVER_PORT=8200
      - MCP_SERVER_BROWSER_PORT=8100
      - TINYPROXY_PORT=8118
      ## CORE ENVIRONMENT VARIABLES ##
      - USER=gem
      - USER_UID=${USER_UID:-1000}
      - USER_GID=${USER_GID:-1000}
      - LOG_DIR=${LOG_DIR:-/tmp/logs}
      - TZ=${TZ:-Asia/Singapore}
      # Browser configuration
      - HOMEPAGE=${HOMEPAGE:-}
      - BROWSER_NO_SANDBOX=${BROWSER_NO_SANDBOX:-"--no-sandbox"}
      - BROWSER_EXTRA_ARGS=${BROWSER_EXTRA_ARGS:-}
      - BROWSER_USER_AGENT=${BROWSER_USER_AGENT:-}
      - BROWSER_REMOTE_DEBUGGING_PORT=9222
      # MCP configuration
      - MCP_ENABLE=${MCP_ENABLE:-false}
      - MCP_SERVER_MARKITDOWN_PORT=8101
      - MCP_SERVER_CHROME_DEVTOOLS_PORT=8102
      # Python/JS
      - PIP_INDEX_URL=${PIP_INDEX_URL:-https://pypi.org/simple}
      - UV_DEFAULT_INDEX=${UV_DEFAULT_INDEX:-https://pypi.org/simple}
      - NPM_CONFIG_REGISTRY=${NPM_CONFIG_REGISTRY:-https://registry.npmjs.org}
      # Proxy configuration
      - PROXY_SERVER=${PROXY_SERVER:-}
      # Nginx configuration
      - NGINX_LOG_LEVEL=${NGINX_LOG_LEVEL:-debug}
    volumes:
      - sandbox_data:/workspace
      - /var/run/dstack.sock:/var/run/dstack.sock
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e

        # Create a non-root user
        if ! getent group $$USER >/dev/null; then
          groupadd --gid $$USER_GID $$USER
        fi
        if ! id -u $$USER >/dev/null 2>&1; then
          useradd --uid $$USER_UID --gid $$USER --shell /bin/bash --create-home $$USER
        fi

        # Add user to sudoers with NOPASSWD (only if we have permission)
        if [ -w /etc/sudoers.d ]; then
          mkdir -p /etc/sudoers.d
          # Check if sudoers entry already exists to avoid duplicates
          if [ ! -f /etc/sudoers.d/$$USER ]; then
            echo "$$USER ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/$$USER
            chmod 440 /etc/sudoers.d/$$USER
          fi
        else
          echo "Warning: Cannot modify sudoers (running in restricted environment)"
        fi

        # bashrc - only move if source exists and destination doesn't
        [ -f /opt/gem/bashrc ] && [ ! -f /home/$$USER/.bashrc ] && mv /opt/gem/bashrc /home/$$USER/.bashrc

        if [ -f /home/$$USER/.bashrc ]; then
          # Add GITHUB_TOKEN if provided
          if [ -n "$${GITHUB_TOKEN}" ]; then
            if ! grep -q "export GITHUB_TOKEN" /home/$$USER/.bashrc; then
              echo "export GITHUB_TOKEN=\"$${GITHUB_TOKEN}\"" >> /home/$$USER/.bashrc
            fi
          fi
        fi

        # Set up GitHub authentication and clone repository if configured
        if [ -n "$${GITHUB_REPO}" ]; then
          echo "Setting up GitHub repository: $$GITHUB_REPO"

          # Authenticate with GitHub CLI if token is provided
          if [ -n "$${GITHUB_TOKEN}" ]; then
            echo "Authenticating with GitHub..."
            # Set up git credentials for token-based authentication
            su - $$USER -c "git config --global credential.helper store"
            su - $$USER -c "echo \"https://\$${GH_TOKEN}@github.com\" > ~/.git-credentials"
            # Also configure gh CLI (skip validation if read:org scope is missing)
            su - $$USER -c "echo \"$${GITHUB_TOKEN}\" | GITHUB_TOKEN=\"$${GITHUB_TOKEN}\" gh auth login --with-token --skip-ssh-key 2>/dev/null || true"
            echo "GitHub authentication configured"
          fi

          # Extract repo name from owner/repo format
          REPO_NAME=$$(echo "$$GITHUB_REPO" | cut -d'/' -f2)

          cd /home/$$USER
          if [ -d "$$REPO_NAME" ]; then
            echo "Repository already exists, pulling latest..."
            su - $$USER -c "cd $$REPO_NAME && git pull" || echo "Pull failed, continuing..."
          else
            echo "Cloning repository..."
            su - $$USER -c "git clone https://github.com/$$GITHUB_REPO.git" || echo "Clone failed, continuing..."
          fi

          # Ensure ownership of cloned repo
          [ -d "$$REPO_NAME" ] && chown -R $$USER:$$USER /home/$$USER/$$REPO_NAME 2>/dev/null || true
          echo "GitHub repository setup completed"
        fi

        # in the end ensure the home directory is owned by the user
        chown -R $$USER:$$USER /home/$$USER

        # Patch to make everything listen on localhost
        sed -i 's/--bind-addr=0\.0\.0\.0:8080/--bind-addr=127.0.0.1:8200/g' /opt/gem/supervisord/supervisord.code_server.conf
        shopt -s nullglob
        for conf_file in /opt/gem/supervisord/*.conf /opt/gem/supervisord.*.conf; do
          sed -i 's/0\.0\.0\.0/127.0.0.1/g' "$$conf_file"
        done
        echo '''
        server {
            # Listen on the public port and act as the default server.
            listen 127.0.0.1:$${PUBLIC_PORT};
            listen [::1]:$${PUBLIC_PORT};

            # No authentication is performed. Requests are immediately passed
            # to the location blocks defined in the developer-provided files.
            include /opt/gem/nginx/*.conf;
        }''' > /opt/gem/nginx-server-without-auth.conf

        # Display startup banner
        print_banner() {
          echo ""
          echo -e "\033[36m██╗   ██╗██╗██████╗ ███████╗██╗   ██╗███╗   ███╗\033[0m"
          echo -e "\033[36m██║   ██║██║██╔══██╗██╔════╝██║   ██║████╗ ████║\033[0m"
          echo -e "\033[36m██║   ██║██║██████╔╝█████╗  ██║   ██║██╔████╔██║\033[0m"
          echo -e "\033[36m╚██╗ ██╔╝██║██╔══██╗██╔══╝  ╚██╗ ██╔╝██║╚██╔╝██║\033[0m"
          echo -e "\033[36m ╚████╔╝ ██║██████╔╝███████╗ ╚████╔╝ ██║ ╚═╝ ██║\033[0m"
          echo -e "\033[36m  ╚═══╝  ╚═╝╚═════╝ ╚══════╝  ╚═══╝  ╚═╝     ╚═╝\033[0m"
          echo ""
          echo -e "\033[32m🚀 VibeVM - A Confidential VM built on top of AIO(All-in-One) Agent Sandbox Environment\033[0m"
          if [ -n "$${IMAGE_VERSION}" ]; then
            echo -e "\033[34m📦 Image Version: $${IMAGE_VERSION}\033[0m"
          fi
          echo -e "\033[33m🌈 Dashboard: http://$${DSTACK_APP_ID}.$${DSTACK_GATEWAY_DOMAIN}\033[0m"
          echo -e "\033[33m📚 Documentation: http://$${DSTACK_APP_ID}.$${DSTACK_GATEWAY_DOMAIN}/v1/docs\033[0m"
          echo ""
          echo -e "\033[35m================================================================\033[0m"
        }

        print_banner

        # Check if MCP enabled
        if [ -n "$${MCP_ENABLE}" && "$$MCP_ENABLE" = "false" ]; then
          echo "disabling mcp server" &&
          touch /opt/gem/mcp.disabled
        fi

        # Jupyter Notebook (Leave disabled unless know why you need it)
        echo "disabling jupyter notebook"
        rm -f /opt/gem/supervisord/supervisord.jupyter.conf

        # 启动 supervisord
        exec /opt/gem/run.sh
    restart: unless-stopped

volumes:
  sandbox_data:
