version: '3.8'

services:
  vibevm:
    image: ghcr.io/agent-infra/sandbox:1.0.0.128
    security_opt:
      - seccomp:unconfined
    extra_hosts:
      - "host.docker.internal:host-gateway"
    entrypoint: ["/bin/bash", "-c"]
    command: >
      "
      # VibeVM Auto-Setup Wrapper
      echo 'üöÄ Starting VibeVM with AIO Sandbox base...';

      # Start base entrypoint in background
      /opt/gem/run.sh &
      BASE_PID=\$!;

      # Wait for supervisord
      echo '‚è≥ Waiting for supervisord...';
      sleep 10;
      WAIT_COUNT=0;
      while ! supervisorctl status >/dev/null 2>&1 && [ \$WAIT_COUNT -lt 30 ]; do
        sleep 2;
        WAIT_COUNT=\$((WAIT_COUNT + 1));
      done;

      # Wait for repo clone if GITHUB_REPO is set
      if [ -n \"\$GITHUB_REPO\" ]; then
        echo '‚è≥ Waiting for repository clone...';
        WAIT_COUNT=0;
        while [ ! -d /home/gem/VibeVM ] && [ \$WAIT_COUNT -lt 60 ]; do
          sleep 2;
          WAIT_COUNT=\$((WAIT_COUNT + 1));
        done;

        if [ -d /home/gem/VibeVM ]; then
          echo '‚úÖ Repository found';
          cd /home/gem/VibeVM;

          # Check if auto-update is enabled
          if [ \"\$VIBEVM_AUTO_UPDATE\" = \"true\" ]; then
            echo 'üîÑ Auto-update enabled, pulling latest changes...';
            sudo -u gem git fetch origin;
            if [ -n \"\$GITHUB_COMMIT\" ]; then
              echo \"üìå Checking out: \$GITHUB_COMMIT\";
              sudo -u gem git checkout \"\$GITHUB_COMMIT\";
            else
              echo 'üìå Pulling latest from default branch...';
              sudo -u gem git pull origin \$(git symbolic-ref --short HEAD);
            fi;
          fi;

          # Run setup script
          if [ -f setup-vibevm.sh ]; then
            echo 'üîß Running VibeVM setup...';
            chmod +x setup-vibevm.sh;
            if sudo -u gem ./setup-vibevm.sh; then
              echo '‚úÖ VibeVM setup complete!';
            else
              echo '‚ùå Setup failed. Check logs at /var/log/aio/';
            fi;
          fi;
        fi;
      fi;

      echo 'üéâ Initialization complete!';
      wait \$BASE_PID;
      "
    expose:
      - "5900"   # VNC_SERVER_PORT
      - "8081"   # AUTH_BACKEND_PORT
      - "8085"   # VIBEVM_AUTH_SERVICE_PORT (NEW)
      - "6080"   # WEBSOCKET_PROXY_PORT
      - "8088"   # GEM_SERVER_PORT
      - "8079"   # MCP_HUB_PORT
      - "8091"   # SANDBOX_SRV_PORT
      - "8888"   # JUPYTER_LAB_PORT
      - "8200"   # CODE_SERVER_PORT
      - "8100"   # MCP_SERVER_BROWSER_PORT
      - "8118"   # TINYPROXY_PORT
      - "8101"   # MCP_SERVER_MARKITDOWN_PORT
      - "8102"   # MCP_SERVER_CHROME_DEVTOOLS_PORT
      - "9222"   # BROWSER_REMOTE_DEBUGGING_PORT
    ports:
      - "8000:8000"  # Application port
      - "8080:8080"  # AIO Sandbox Public Port
    environment:
      # Git repository configuration (clone VibeVM repo to run setup)
      - GITHUB_REPO=${GITHUB_REPO:-Phala-Network/VibeVM}
      - GITHUB_COMMIT=${GITHUB_COMMIT:-}
      - VIBEVM_AUTO_UPDATE=${VIBEVM_AUTO_UPDATE:-false}
      - GH_TOKEN=${GH_TOKEN}
      # Optional tooling installation
      - INSTALL_HAPPY=${INSTALL_HAPPY:-true}
      - INSTALL_CLAUDE=${INSTALL_CLAUDE:-true}
      # User configuration
      - USER=gem
      - USER_UID=${USER_UID:-1000}
      - USER_GID=${USER_GID:-1000}
      # Basic settings
      - LOG_DIR=${LOG_DIR:-/tmp/logs}
      - GEM_SERVER_PORT=${GEM_SERVER_PORT:-8088}
      - PUBLIC_PORT=${PUBLIC_PORT:-8080}
      - TZ=${TZ:-Asia/Singapore}
      - DISPLAY_WIDTH=${DISPLAY_WIDTH:-1920}
      - DISPLAY_HEIGHT=${DISPLAY_HEIGHT:-1080}
      # VibeVM Authentication (NEW)
      - VIBEVM_USERNAME=${VIBEVM_USERNAME:-admin}
      - VIBEVM_PASSWORD=${VIBEVM_PASSWORD:-admin}
      - VIBEVM_PASSWORD_HASH=${VIBEVM_PASSWORD_HASH:-}
      - SESSION_TIMEOUT=${SESSION_TIMEOUT:-86400}
      - AUTH_SERVICE_PORT=${AUTH_SERVICE_PORT:-8085}
      # Desktop Environment (NEW)
      - XDG_CURRENT_DESKTOP=XFCE
      - XDG_SESSION_TYPE=x11
      - XDG_SESSION_DESKTOP=XFCE
      - DESKTOP_SESSION=XFCE
      # Service-specific environment variables
      - DISPLAY=:99.0
      - HOME=/home/gem
      - XDG_RUNTIME_DIR=/tmp/runtime-gem
      - PYTHONPATH=/opt/gem
      - BROWSER_EXECUTABLE_PATH=/usr/local/bin/browser
      - PUPPETEER_EXECUTABLE_PATH=/usr/local/bin/browser
      - BROWSER_REMOTE_DEBUGGING_PORT=${BROWSER_REMOTE_DEBUGGING_PORT:-9222}
      - WEBSOCKET_PROXY_PORT=${WEBSOCKET_PROXY_PORT:-6080}
      - VNC_SERVER_PORT=${VNC_SERVER_PORT:-5900}
      - AUTH_BACKEND_PORT=${AUTH_BACKEND_PORT:-8081}
      - MCP_SERVER_PORT=${MCP_SERVER_PORT:-8089}
      - SUPERVISOR_GROUP_NAME=python-server
      - SUPERVISOR_SERVER_URL=unix:///var/run/supervisor.sock
      - WORKSPACE=/home/gem
      - BROWSER_USER_AGENT=${BROWSER_USER_AGENT:-}
      - BROWSER_NO_SANDBOX=${BROWSER_NO_SANDBOX:---no-sandbox}
      - BROWSER_EXTRA_ARGS=${BROWSER_EXTRA_ARGS:-}
      - HOMEPAGE=${HOMEPAGE:-}
      - PROXY_SERVER=${PROXY_SERVER:-}
      - JWT_PUBLIC_KEY=${JWT_PUBLIC_KEY:-}
      - DNS_OVER_HTTPS_TEMPLATES=${DNS_OVER_HTTPS_TEMPLATES:-}
      - NGINX_LOG_LEVEL=${NGINX_LOG_LEVEL:-debug}
      - DEBIAN_FRONTEND=noninteractive
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - OTEL_SDK_DISABLED=true
      - LANG=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
      - LANGUAGE=en_US:en
    volumes:
      - sandbox_data:/workspace
      - /var/run/dstack.sock:/var/run/dstack.sock
    restart: unless-stopped

volumes:
  sandbox_data:
